
import streamlit as st
import pandas as pd
import plotly.express as px
import matplotlib.pyplot as plt
import numpy as np

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(page_title="Geoeconomics Dashboard", layout="wide")
st.title("üìä Geoeconomics Dashboard ‚Äî 2025 + –ü—Ä–æ–≥–Ω–æ–∑—ã –¥–æ 2030")
st.markdown("–ê–∫—Ç—É–∞–ª–∏–∑–∞—Ü–∏—è –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö —Ç—Ä–µ–Ω–¥–æ–≤, –≥—Ä–∞—Ñ–∏–∫–∏, –ø—Ä–æ–≥–Ω–æ–∑—ã –∏ –∫–∞—Ä—Ç–∞ —Ç–æ—á–µ–∫ —Ä–æ—Å—Ç–∞.")

# –î–∞–Ω–Ω—ã–µ
data = [
    ["üåç Geoeconomics (5C)", "IMF 2025: –ò–Ω–¥–∏—è ‚Äî 3-—è —ç–∫–æ–Ω–æ–º–∏–∫–∞ –º–∏—Ä–∞; –ê—Ñ—Ä–∏–∫–∞ +30 –º–ª–Ω —á–µ–ª/–≥–æ–¥; –ö–∏—Ç–∞–π/–ò–Ω–¥–∏—è —Ä–∞—Å—Ç—É—Ç –ø–æ KOF Globalisation Index", "üìà", "2025-07"],
    ["‚öî –ö–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "GPI 2024: —É—Ö—É–¥—à–µ–Ω–∏–µ –≤ –£–∫—Ä–∞–∏–Ω–µ, –ô–µ–º–µ–Ω–µ, –¢–∞–π–≤–∞–Ω–µ; SIPRI: –°–®–ê 3% –í–í–ü, –ö–∏—Ç–∞–π 2,2%; ACLED: —Ä–æ—Å—Ç –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ –°–∞—Ö–µ–ª–µ +15%", "üìâ", "2025-07"],
    ["üèô –ì–æ—Ä–æ–¥–∞ –∏ —É—Ä–±–∞–Ω–∏–∑–∞—Ü–∏—è", "Oxford Economics 2025: NY, London, Paris –ª–∏–¥–µ—Ä—ã; Melbourne, Sydney –≤ —Ç–æ–ø-10; GPCI: London, NY, Tokyo", "üìà", "2025-07"],
    ["üìñ –ù–∞—Ä–∞—Ç–∏–≤—ã –∏ —Ç—Ä–µ–Ω–¥—ã", "Google Trends: —Ä–æ—Å—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ AI, ESG; Edelman Trust: –¥–æ–≤–µ—Ä–∏–µ –∫ –±–∏–∑–Ω–µ—Å—É > –∫ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤—É", "‚û°", "2025-07"],
    ["üß¨ –ê–Ω—Ç—Ä–æ–ø–æ—ç–∫–æ–Ω–æ–º–∏–∫–∞", "Gen Z: —Ü–µ–Ω–Ω–æ—Å—Ç—å ‚Äî –º–∏—Å—Å–∏—è > –∑–∞—Ä–ø–ª–∞—Ç–∞; Silver Economy: —Ä–æ—Å—Ç –Ω–∞—Å–µ–ª–µ–Ω–∏—è 65+; Pew: —Ç–æ–ª–µ—Ä–∞–Ω—Ç–Ω–æ—Å—Ç—å +7%", "üìà", "2025-07"],
    ["‚ôª ESG –∏ SDG", "SDG Tracker: –†–§ –≤—ã–ø–æ–ª–Ω–∏–ª–∞ 13/17 —Ü–µ–ª–µ–π; ESG —Ñ–æ–Ω–¥—ã +20% –≤ 2024; MSCI ESG Leaders –æ–±–≥–æ–Ω—è—é—Ç —Ä—ã–Ω–æ–∫", "üìà", "2025-07"],
    ["ü§ñ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–¥–≤–∏–≥–∏", "Stanford AI Index: –°–®–ê 40 AI –º–æ–¥–µ–ª–µ–π, –ö–∏—Ç–∞–π 15; WIPO: –ö–∏—Ç–∞–π 24% –±–∏–æ–ø–∞—Ç–µ–Ω—Ç–æ–≤, –°–®–ê 28%", "üìà", "2025-07"],
    ["‚ö° –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã", "USGS: –ö–∏—Ç–∞–π –∏ –ß–∏–ª–∏ –ª–∏–¥–µ—Ä—ã –ø–æ –ª–∏—Ç–∏–π; FAO: –ê—Ñ—Ä–∏–∫–∞ –≤ –¥–µ—Ñ–∏—Ü–∏—Ç–µ –≤–æ–¥—ã; EIU: —Ä–æ—Å—Ç —Ä–∏—Å–∫–∞ –ø—Ä–æ–¥–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "‚û°", "2025-07"],
    ["üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –ø–æ—Ç–æ–∫–∏", "GFCI 37 (2025): NY, London, HK –ª–∏–¥–µ—Ä—ã; UNCTAD: FDI –≤ —Ä–∞–∑–≤–∏–≤–∞—é—â–∏–µ—Å—è —Å—Ç—Ä–∞–Ω—ã +8%", "üìà", "2025-07"],
    ["üå° –ö–ª–∏–º–∞—Ç –∏ –º–∏–≥—Ä–∞—Ü–∏—è", "Germanwatch: –ü–∞–∫–∏—Å—Ç–∞–Ω, –ë–∞–Ω–≥–ª–∞–¥–µ—à, –ì–∞–∏—Ç–∏ ‚Äî –≤ —Ç–æ–ø —Ä–∏—Å–∫–∞; UNHCR: 34 –º–ª–Ω –∫–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –º–∏–≥—Ä–∞–Ω—Ç–æ–≤ –∫ 2030", "üìâ", "2025-07"],
    ["üé≠ –°–æ—Ü–∏–∞–ª—å–Ω–æ-–∫—É–ª—å—Ç—É—Ä–Ω—ã–µ —Å–¥–≤–∏–≥–∏", "WHR 2024: —Å—á–∞—Å—Ç—å–µ –∫–æ—Ä—Ä–µ–ª–∏—Ä—É–µ—Ç —Å –¥–æ–≤–µ—Ä–∏–µ–º; Euromonitor: Gen Z ‚Äî 40% –∑–∞ –±—Ä–µ–Ω–¥—ã —Å —Ü–µ–Ω–Ω–æ—Å—Ç—è–º–∏", "üìà", "2025-07"],
    ["üì∞ –ú–µ–¥–∏–π–Ω—ã–µ —Ç—Ä–µ–Ω–¥—ã", "Freedom House: —Å–Ω–∏–∂–µ–Ω–∏–µ —Å–≤–æ–±–æ–¥—ã –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞; Statista: —Å–æ—Ü—Å–µ—Ç–∏ >50% –º–µ–¥–∏–∞–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è", "‚û°", "2025-07"]
]

df = pd.DataFrame(data, columns=["–ë–ª–æ–∫", "–û–ø–∏—Å–∞–Ω–∏–µ", "–¢—Ä–µ–Ω–¥", "–û–±–Ω–æ–≤–ª–µ–Ω–æ"])

# –í—ã–±–æ—Ä –±–ª–æ–∫–∞
selected_block = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:", df["–ë–ª–æ–∫"])
block_data = df[df["–ë–ª–æ–∫"] == selected_block].iloc[0]

st.subheader(f"{block_data['–¢—Ä–µ–Ω–¥']} {block_data['–ë–ª–æ–∫']}")
st.markdown(f"**–û–ø–∏—Å–∞–Ω–∏–µ:** {block_data['–û–ø–∏—Å–∞–Ω–∏–µ']}")
st.markdown(f"**–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:** {block_data['–û–±–Ω–æ–≤–ª–µ–Ω–æ']}")

# –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –ø—Ä–æ–≥–Ω–æ–∑
show_forecast = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –¥–æ 2030 –≥–æ–¥–∞", value=True)

# –ü—Ä–∏–º–µ—Ä –≥—Ä–∞—Ñ–∏–∫–æ–≤ —Å –ø—Ä–æ–≥–Ω–æ–∑–∞–º–∏
if selected_block == "ü§ñ –¢–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–¥–≤–∏–≥–∏":
    years = np.array(list(range(2018, 2026)))
    values = np.array([10, 15, 20, 35, 55, 75, 120, 150])
    
    fig, ax = plt.subplots()
    ax.plot(years, values, marker="o", label="–§–∞–∫—Ç")
    
    if show_forecast:
        forecast_years = np.array(list(range(2025, 2031)))
        coef = np.polyfit(years[-4:], values[-4:], 1)
        forecast_values = np.polyval(coef, forecast_years)
        ax.plot(forecast_years, forecast_values, 'r--', label="–ü—Ä–æ–≥–Ω–æ–∑")
    
    ax.set_title("–ì–ª–æ–±–∞–ª—å–Ω—ã–µ –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏ –≤ AI (–º–ª—Ä–¥ $)")
    ax.legend()
    st.pyplot(fig)

elif selected_block == "üå° –ö–ª–∏–º–∞—Ç –∏ –º–∏–≥—Ä–∞—Ü–∏—è":
    years = np.array(list(range(2010, 2026)))
    values = np.array([5, 7, 8, 10, 12, 15, 18, 20, 25, 28, 30, 33, 34, 34, 35, 36])
    
    fig, ax = plt.subplots()
    ax.plot(years, values, marker="o", label="–§–∞–∫—Ç")
    
    if show_forecast:
        forecast_years = np.array(list(range(2025, 2031)))
        coef = np.polyfit(years[-4:], values[-4:], 1)
        forecast_values = np.polyval(coef, forecast_years)
        ax.plot(forecast_years, forecast_values, 'r--', label="–ü—Ä–æ–≥–Ω–æ–∑")
    
    ax.set_title("–ö–ª–∏–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –º–∏–≥—Ä–∞–Ω—Ç—ã (–º–ª–Ω —á–µ–ª–æ–≤–µ–∫)")
    ax.legend()
    st.pyplot(fig)

elif selected_block == "üèô –ì–æ—Ä–æ–¥–∞ –∏ —É—Ä–±–∞–Ω–∏–∑–∞—Ü–∏—è":
    years = np.array(list(range(2000, 2026)))
    values = np.array([47, 49, 51, 53, 55, 57, 59, 61, 63, 65, 67, 69, 71, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85])
    
    fig, ax = plt.subplots()
    ax.plot(years, values, marker="o", color="green", label="–§–∞–∫—Ç")
    
    if show_forecast:
        forecast_years = np.array(list(range(2025, 2031)))
        coef = np.polyfit(years[-4:], values[-4:], 1)
        forecast_values = np.polyval(coef, forecast_years)
        ax.plot(forecast_years, forecast_values, 'r--', label="–ü—Ä–æ–≥–Ω–æ–∑")
    
    ax.set_title("–î–æ–ª—è –≥–æ—Ä–æ–¥—Å–∫–æ–≥–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—è (%)")
    ax.legend()
    st.pyplot(fig)

# –ö–∞—Ä—Ç–∞
st.markdown("### üåç –ö–∞—Ä—Ç–∞ —Ç–æ—á–µ–∫ —Ä–æ—Å—Ç–∞")
city_data = pd.DataFrame({
    "–ì–æ—Ä–æ–¥": ["New York", "London", "Paris", "Singapore", "Dubai", "Shanghai"],
    "–®–∏—Ä–æ—Ç–∞": [40.7128, 51.5074, 48.8566, 1.3521, 25.276987, 31.2304],
    "–î–æ–ª–≥–æ—Ç–∞": [-74.0060, -0.1278, 2.3522, 103.8198, 55.296249, 121.4737],
    "–†–æ—Å—Ç (%)": [2.1, 1.5, 1.3, 3.2, 4.0, 2.8]
})
fig_map = px.scatter_mapbox(
    city_data, lat="–®–∏—Ä–æ—Ç–∞", lon="–î–æ–ª–≥–æ—Ç–∞", hover_name="–ì–æ—Ä–æ–¥", hover_data=["–†–æ—Å—Ç (%)"],
    color_discrete_sequence=["red"], zoom=1, height=500
)
fig_map.update_layout(mapbox_style="open-street-map")
st.plotly_chart(fig_map, use_container_width=True)
